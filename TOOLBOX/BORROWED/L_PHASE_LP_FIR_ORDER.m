	function [N, Be, D, W] = L_PHASE_LP_FIR_ORDER(wT, d) 	%	Estimates the required order, N, for minimax designed linear-phase 	%	lowpass FIR filter. The estimate is better compared with remezord, 	%	especially for cutoff edges close to 0 or ¹ rad and long filters.	%	L = filter length (No of samples in the impulse response) is L = N + 1.	%	%   inputs:	%	  wT = [wcT wsT]	%     wcT: passband cutoff edge (NORMALIZED 0 < wcT < ¹ rad)	%     wsT: stopband cutoff edge > wcT 	%	  d = [dc ds]	%     deltac: passband ripple 	%     deltas: stopband ripple < dc	%	%	outputs:	%		Formated for direct use by PMR_FIR.m and firmp.m or remez.m		% 	Toolbox for DIGITAL FILTERS USING MATLAB		% Author: 			Lars Wanhammar 2004-07-17	% Modified by: 	 	% Copyright:		by authors - not released for commercial use	% Version:			1 	% Known bugs:			% Report bugs to:	Wanhammar@gmail.com	%	% References:		K. Ichige, M. Iwaki, and R. Ishii: Accurate Estimation of Minimum Filter 	%					Length for Optimum FIR Digital Filters, IEEE Trans. on Circuits and Systems - II	%					Vol. 47, No. 10, pp. 1008-1016, Oct. 2000.    	if (wT(1) >= wT(2) | wT(1) >= pi | wT(2) > pi)		error('Improper band edges. Edges should be: wcT< wsT <= ¹.')	end				fc = wT(1)/pi/2;		%  NORMALIZE to half the sampling frequency	fs = wT(2)/pi/2;		% as done in MATLABs signal processing toolbox	deltaF = fs - fc;	deltac = d(1);	deltas = d(2);	N = N4(0.5-fc, deltaF, deltac, deltas) - 1;	%	Be = [0.0 wT(1)/pi wT(2)/pi 1]';	Be = [0.0 wT(1) wT(2) pi]';	D = [1 1 0 0]';	W = [1 d(1)/d(2)]';	%-----------------------------------------------------------	function h = h13(fc, deltaF, c)	h = (2/pi)*atan((c/deltaF)*(1/fc - 1/(1-deltaF)));	%------------------------------------------------------------	function g = g13(fc, deltaF, delta)	v = 2.325*((-log10(delta))^-0.445) * deltaF^-1.39;	g = (2/pi)*atan(v*(1/fc - 1/(1-deltaF)));	%-----------------------------------------------------------	function Nc = Nc(deltaF, delta)	Nc = ceil((1.101/deltaF)*(-log10(2*delta))^1.1 +1);	%-----------------------------------------------------------	function N3 = N3(fc, deltaF, b)	N3 = ceil(Nc(deltaF, b)*(g13(fc, deltaF, b) + g13(1-deltaF-fc, deltaF, b) + 1)/3);	%-----------------------------------------------------------	function Nm = Nm(deltaF, deltac, deltas)	Nm = (0.52/deltaF)*log10(deltac/deltas)*((-log10(deltac))^0.17);	%-----------------------------------------------------------	function DN = DN(fc, deltaF, deltac, deltas)	DN = ceil(Nm(deltaF, deltac, deltas)*(h13(fc, deltaF, 1.1) - 0.5*(h13(1-deltaF-fc, deltaF, 0.29)-1)));	%-----------------------------------------------------------	function N4 = N4(fc, deltaF, deltac, deltas)	N4 = N3(fc, deltaF, deltac) + DN(fc, deltaF, deltac, deltas);	%-----------------------------------------------------------	