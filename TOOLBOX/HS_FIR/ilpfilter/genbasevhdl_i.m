function genbasevhdl_i(dir)
%Automatically generated by meta from source files:
%base/fa.vhdl
%base/fa_noc.vhdl
%base/ha.vhdl
%base/ha_noc.vhdl
%base/dff.vhdl
%base/reg.vhdl

fn = strcat(dir, '/', 'fa.vhdl');
fid = fopen(fn, 'w+');
fprintf(fid, 'library ieee;\n');
fprintf(fid, 'use ieee.std_logic_1164.all;\n');
fprintf(fid, 'use ieee.numeric_std.all;\n');
fprintf(fid, '\n');
fprintf(fid, 'entity fa is\n');
fprintf(fid, '  \n');
fprintf(fid, '  port (\n');
fprintf(fid, '    in1, in2, in3 : in  std_logic;\n');
fprintf(fid, '    outs, outc    : out std_logic);\n');
fprintf(fid, '\n');
fprintf(fid, 'end fa;\n');
fprintf(fid, '\n');
fprintf(fid, 'architecture behav of fa is\n');
fprintf(fid, '\n');
fprintf(fid, 'begin  -- behav\n');
fprintf(fid, '\n');
fprintf(fid, '  outs <= in1 xor in2 xor in3;\n');
fprintf(fid, '  outc <= (in1 and in2) or (in1 and in3) or (in2 and in3);\n');
fprintf(fid, '\n');
fprintf(fid, 'end behav;\n');
fclose(fid);

fn = strcat(dir, '/', 'fa_noc.vhdl');
fid = fopen(fn, 'w+');
fprintf(fid, 'library ieee;\n');
fprintf(fid, 'use ieee.std_logic_1164.all;\n');
fprintf(fid, 'use ieee.numeric_std.all;\n');
fprintf(fid, '\n');
fprintf(fid, 'entity fa_noc is\n');
fprintf(fid, '  \n');
fprintf(fid, '  port (\n');
fprintf(fid, '    in1, in2, in3 : in  std_logic;\n');
fprintf(fid, '    outs          : out std_logic);\n');
fprintf(fid, '\n');
fprintf(fid, 'end fa_noc;\n');
fprintf(fid, '\n');
fprintf(fid, 'architecture behav of fa_noc is\n');
fprintf(fid, '\n');
fprintf(fid, 'begin  -- behav\n');
fprintf(fid, '\n');
fprintf(fid, '  outs <= in1 xor in2 xor in3;\n');
fprintf(fid, '\n');
fprintf(fid, 'end behav;\n');
fclose(fid);

fn = strcat(dir, '/', 'ha.vhdl');
fid = fopen(fn, 'w+');
fprintf(fid, 'library ieee;\n');
fprintf(fid, 'use ieee.std_logic_1164.all;\n');
fprintf(fid, 'use ieee.numeric_std.all;\n');
fprintf(fid, '\n');
fprintf(fid, 'entity ha is\n');
fprintf(fid, '  \n');
fprintf(fid, '  port (\n');
fprintf(fid, '    in1, in2   : in  std_logic;\n');
fprintf(fid, '    outs, outc : out std_logic);\n');
fprintf(fid, '\n');
fprintf(fid, 'end ha;\n');
fprintf(fid, '\n');
fprintf(fid, 'architecture behav of ha is\n');
fprintf(fid, '\n');
fprintf(fid, 'begin  -- behav\n');
fprintf(fid, '\n');
fprintf(fid, '  outs <= in1 xor in2;\n');
fprintf(fid, '  outc <= (in1 and in2);\n');
fprintf(fid, '\n');
fprintf(fid, 'end behav;\n');
fclose(fid);

fn = strcat(dir, '/', 'ha_noc.vhdl');
fid = fopen(fn, 'w+');
fprintf(fid, 'library ieee;\n');
fprintf(fid, 'use ieee.std_logic_1164.all;\n');
fprintf(fid, 'use ieee.numeric_std.all;\n');
fprintf(fid, '\n');
fprintf(fid, 'entity ha_noc is\n');
fprintf(fid, '  \n');
fprintf(fid, '  port (\n');
fprintf(fid, '    in1, in2 : in  std_logic;\n');
fprintf(fid, '    outs     : out std_logic);\n');
fprintf(fid, '\n');
fprintf(fid, 'end ha_noc;\n');
fprintf(fid, '\n');
fprintf(fid, 'architecture behav of ha_noc is\n');
fprintf(fid, '\n');
fprintf(fid, 'begin  -- behav\n');
fprintf(fid, '\n');
fprintf(fid, '  outs <= in1 xor in2;\n');
fprintf(fid, '\n');
fprintf(fid, 'end behav;\n');
fclose(fid);

fn = strcat(dir, '/', 'dff.vhdl');
fid = fopen(fn, 'w+');
fprintf(fid, 'library ieee;\n');
fprintf(fid, 'use ieee.std_logic_1164.all;\n');
fprintf(fid, 'use ieee.numeric_std.all;\n');
fprintf(fid, '\n');
fprintf(fid, 'entity dff is\n');
fprintf(fid, '  \n');
fprintf(fid, '  port (\n');
fprintf(fid, '    clk, reset : in  std_logic;\n');
fprintf(fid, '    d : in  std_logic;\n');
fprintf(fid, '    q : out std_logic);\n');
fprintf(fid, '\n');
fprintf(fid, 'end dff;\n');
fprintf(fid, '\n');
fprintf(fid, 'architecture behav of dff is\n');
fprintf(fid, '\n');
fprintf(fid, 'begin  -- behav\n');
fprintf(fid, '\n');
fprintf(fid, '  p: process (clk, reset)\n');
fprintf(fid, '  begin  -- process p\n');
fprintf(fid, '    if reset = ''0'' then                 -- asynchronous reset (active low)\n');
fprintf(fid, '      q <= ''0'';\n');
fprintf(fid, '    elsif clk''event and clk = ''1'' then  -- rising clock edge\n');
fprintf(fid, '      q <= d;\n');
fprintf(fid, '    end if;\n');
fprintf(fid, '  end process p;\n');
fprintf(fid, '\n');
fprintf(fid, 'end behav;\n');
fclose(fid);

fn = strcat(dir, '/', 'reg.vhdl');
fid = fopen(fn, 'w+');
fprintf(fid, 'library ieee;\n');
fprintf(fid, 'use ieee.std_logic_1164.all;\n');
fprintf(fid, 'use ieee.numeric_std.all;\n');
fprintf(fid, '\n');
fprintf(fid, 'entity reg is\n');
fprintf(fid, '\n');
fprintf(fid, '  generic (\n');
fprintf(fid, '    wordlength : positive);\n');
fprintf(fid, '  \n');
fprintf(fid, '  port (\n');
fprintf(fid, '    clk, reset : in  std_logic;\n');
fprintf(fid, '    d : in  std_logic_vector(wordlength-1 downto 0);\n');
fprintf(fid, '    q : out std_logic_vector(wordlength-1 downto 0));\n');
fprintf(fid, '\n');
fprintf(fid, 'end reg;\n');
fprintf(fid, '\n');
fprintf(fid, 'architecture behav of reg is\n');
fprintf(fid, '\n');
fprintf(fid, 'begin  -- behav\n');
fprintf(fid, '\n');
fprintf(fid, '  p: process (clk, reset)\n');
fprintf(fid, '  begin  -- process p\n');
fprintf(fid, '    if reset = ''0'' then                 -- asynchronous reset (active low)\n');
fprintf(fid, '      q <= (others => ''0'');\n');
fprintf(fid, '    elsif clk''event and clk = ''1'' then  -- rising clock edge\n');
fprintf(fid, '      q <= d;\n');
fprintf(fid, '    end if;\n');
fprintf(fid, '  end process p;\n');
fprintf(fid, '\n');
fprintf(fid, 'end behav;\n');
fclose(fid);

